/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.yydigital.keyguard;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;

import android.app.Activity;
import android.app.KeyguardManager;
import android.app.KeyguardManager.KeyguardLock;
import android.content.Context;
import android.os.PowerManager;

@Kroll.module(name = "Keyguard", id = "com.yydigital.keyguard")
public class KeyguardModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "KeyguardModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public KeyguardModule(TiContext tiContext) {
		super(tiContext);
	}

	// Methods
	@Kroll.method
	public void disable() {
		KeyguardManager keyguardManager = (KeyguardManager) super.context
				.getActivity().getSystemService(Activity.KEYGUARD_SERVICE);
		KeyguardLock lock = keyguardManager
				.newKeyguardLock(Activity.KEYGUARD_SERVICE);
		if (lock != null) {
			lock.disableKeyguard();
		}
	}

	@Kroll.method
	public void enable() {
		KeyguardManager keyguardManager = (KeyguardManager) super.context
				.getActivity().getSystemService(Activity.KEYGUARD_SERVICE);
		KeyguardLock lock = keyguardManager
				.newKeyguardLock(Activity.KEYGUARD_SERVICE);
		if (lock != null) {
			lock.reenableKeyguard();
		}
	}

	@Kroll.method
	public void wakeUp() {
		PowerManager pm = (PowerManager) super.context
		.getActivity().getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(
				PowerManager.SCREEN_DIM_WAKE_LOCK | // could use bright instead
						PowerManager.ACQUIRE_CAUSES_WAKEUP | // so we actually
																// wake the
																// device
						PowerManager.ON_AFTER_RELEASE // and we keep it on for a
														// bit after release
				, "My Tag");
		wl.acquire();
		wl.release();
	}
}
